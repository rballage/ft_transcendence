generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  userId String  @unique
}

model User {
  //   id                   String         @id @unique @default(uuid())
  name                 String         @id @unique
  email                String?        @unique
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?      @updatedAt
  TwoFA                Boolean?       @default(false)
  avatar               Bytes?
  hash                 String         @default("null")
  profile              Profile?
  channelSubscriptions Subscription[] @relation("myPrivateChannels")
  messages             Message[]
  gameHistoryPOne      Game[]         @relation("p1player")
  gameHistoryPTwo      Game[]         @relation("p2player")
  followedBy           Follows[]      @relation("following")
  following            Follows[]      @relation("follower")
  blockedBy            Blocks[]       @relation("blocking")
  blocking             Blocks[]       @relation("blocker")
}

// must check on creation that the relationship doenst link the same user
model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  followerId  String @unique
  following   User   @relation("following", fields: [followingId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  followingId String @unique

  @@id([followerId, followingId])
}

// must check on creation that the relationship doenst link the same user
model Blocks {
  blocker    User   @relation("blocker", fields: [blockerId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  blockerId  String @unique
  blocking   User   @relation("blocking", fields: [blockingId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  blockingId String @unique

  @@id([blockerId, blockingId])
}

model Message {
  id         String   @id @unique @default(uuid())
  CreatedAt  DateTime @default(now())
  ReceivedAt DateTime @default(now())
  content    String
  author     User     @relation(fields: [userId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  userId     String
  channel    Channel  @relation(fields: [channelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  channelId  String

  @@index([CreatedAt, ReceivedAt, userId])
}

model Channel {
  id                String         @id @unique @default(uuid())
  name              String         @unique
  createdAt         DateTime       @default(now())
  updated           DateTime?      @default(now()) @updatedAt
  public            Boolean        @default(false)
  SubscribedUsers Subscription[]
  Message           Message[]
  hash                 String?

  //   owner 	User @relation(fields: [ownerId], references: [name], onDelete: Cascade)
  //   ownerId String
}

model Subscription {
  id                  String            @id @unique @default(uuid())
  role                eRole            @default(USER)
  channel             Channel          @relation(fields: [channelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user                User              @relation("myPrivateChannels", fields: [userId], references: [name], onUpdate: Cascade, onDelete: Cascade)
  userId              String
  channelId           String
  state        eSubscriptionState @default(WHITELISTED)
  blockedUntil DateTime?
}

model Game {
  id              String    @id @unique @default(uuid())
  finishedAt      DateTime? @default(now())
  startedAt       DateTime  @default(now())
  score_playerOne Int?
  score_playerTwo Int
  playerOne       User?     @relation("p1player", fields: [playerOneName], references: [name], onUpdate: Cascade, onDelete: SetNull)
  playerOneName   String?
  playerTwo       User?     @relation("p2player", fields: [playerTwoName], references: [name], onUpdate: Cascade, onDelete: SetNull)
  playerTwoName   String?
}

enum eSubscriptionState {
  BLACKLISTED
  WHITELISTED
}

enum eRole {
  OWNER
  ADMIN
  USER
}
