generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
//   profile Profile?
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model User {
  id                   String         @id @unique @default(cuid())
  name                 String         @unique
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?      @updatedAt
  TwoFA                Boolean?       @default(false)
  avatar               Bytes?
  hash                 String         @default("null")
  profile              Profile?
  channelSubscriptions Subscription[] @relation("myPrivateChannels")
  messages             Message[]
  gameHistoryPOne      Game[]         @relation("p1player")
  gameHistoryPTwo      Game[]         @relation("p2player")
  friends              Friend[]
}

model Friend {
  id       String @id @unique @default(cuid())
  user     User   @relation(fields: [userName], references: [name])
  userName String
}

model Message {
  id        String   @id @unique @default(cuid())
  CreatedAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
}

model Channel {
  id                String         @id @unique @default(cuid())
  name              String         @unique
  createdAt         DateTime       @default(now())
  updated           DateTime?      @default(now()) @updatedAt
  public            Boolean        @default(false)
  userSubscriptions Subscription[]
  Message           Message[]
}

model Subscription {
  id                  String            @id @unique @default(cuid())
  role                eRole?            @default(USER)
  channel             Channel?          @relation(fields: [channelId], references: [id])
  user                User              @relation("myPrivateChannels", fields: [userId], references: [id])
  state               SubscriptionState @relation(fields: [subscriptionStateId], references: [id])
  channelId           String?
  userId              String
  subscriptionStateId String
}

model SubscriptionState {
  id           String             @id @unique @default(cuid())
  state        eSubscriptionState @default(WHITELISTED)
  blockedUntil DateTime?
  Subscription Subscription[]
}

model Game {
  id              String    @id @unique @default(cuid())
  finishedAt      DateTime? @default(now())
  startedAt       DateTime  @default(now())
  score_playerOne Int?
  score_playerTwo Int
  playerOne       User?     @relation("p1player", fields: [playerOneName], references: [name])
  playerOneName   String?
  playerTwo       User?     @relation("p2player", fields: [playerTwoName], references: [name])
  playerTwoName   String?
}

enum eSubscriptionState {
  BLACKLISTED
  WHITELISTED
}

enum eRole {
  OWNER
  ADMIN
  USER
}
